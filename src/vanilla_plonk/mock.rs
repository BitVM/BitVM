use core::panic;

use crate::vanilla_plonk::types::{StringifiedPlonkProof};
pub struct Mock;

impl Mock {
    pub fn new() -> Self { Mock }

    pub fn get_plonk_proof() -> StringifiedPlonkProof {
        let proof = StringifiedPlonkProof {
            a: [
                "1078334906893789514326100165891809848019336850231558106434853250714105685786"
                    .to_string(),
                "12948923423229301041562867238331904424847534881201052576626140469622636061826"
                    .to_string(),
            ],
            b: [
                "14871968772362298531943225503095829341924221467861921630107399429839476377261"
                    .to_string(),
                "20832225230760737481879255829686244402434679017360094720847540179928583113429"
                    .to_string(),
            ],
            c: [
                "11018249123771408599195936218586462295060894617169990047481063103297346617511"
                    .to_string(),
                "20812079485764029398417948581030957233058448081114384385766482068306123340499"
                    .to_string(),
            ],
            z: [
                "18911369861849293400948671769181923953820381693244798480818014763242334194102"
                    .to_string(),
                "17301903807617710475810560475296429124681646194334020082660695106153270924197"
                    .to_string(),
            ],
            t1: [
                "8035481489412023854698082330728841837577166856942677235942161713802425228226"
                    .to_string(),
                "6100259826093601981346932339239322114347879658851780471127604889244409653156"
                    .to_string(),
            ],
            t2: [
                "10155064182436199621699595529626653722315634234955723925606936081123556290749"
                    .to_string(),
                "18176178013415694491760099032391438634755777914521625038595348247591920109678"
                    .to_string(),
            ],
            t3: [
                "17414543813591730681967718268670846901403831253033280305025278121489872982688"
                    .to_string(),
                "17180628559445942570926171368945985337988231638174686279031469310437333205328"
                    .to_string(),
            ],
            eval_a: "7619444648548762352688989264071365525087666293572605752963973137331466620379"
                .to_string(),
            eval_b: "12564993388515609407621530932388481577961227603586802807221481569176168238260"
                .to_string(),
            eval_c: "6511986115001766925734365330664692166783761208764259458159980563836620574767"
                .to_string(),
            eval_s1: "2812298524885313129731692194184506018747404376931025737870079617824503660557"
                .to_string(),
            eval_s2:
                "18528016128263279091264827025576269655151738875625751164199105939098225113539"
                    .to_string(),
            eval_zw:
                "19038588322698518798348739810505212451458100152031223020479859202175121868652"
                    .to_string(),
            eval_r: "11410710969449562470071038294456377378562621755076252052836692477638805717495"
                .to_string(),
            pi: "7713112592372404476342535432037683616424591277138491596200192981572885523208"
                .to_string(),
            wxi: [
                "9035873252023575753720767347127457878893885607768879055873568678356030733580"
                    .to_string(),
                "21585298432760990951017113608981855362693473929127174343206877901449604046764"
                    .to_string(),
            ],
            wxiw: [
                "1849097023576595529567405124779246485506180099711177377631796309107793590717"
                    .to_string(),
                "10708519881826667651353678747174273508520559877623541936787968407888335454354"
                    .to_string(),
            ],
        };

        proof
    }

    pub fn get_mock_verification_key() {
        panic!("Not implemented");
    }
}
